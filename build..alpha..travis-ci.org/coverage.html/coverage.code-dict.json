{"/home/travis/build/npmtest/node-npmtest-angular-momentjs/test.js":"/* istanbul instrument in package npmtest_angular_momentjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-momentjs/lib.npmtest_angular_momentjs.js":"/* istanbul instrument in package npmtest_angular_momentjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular_momentjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular_momentjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-momentjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular-momentjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular_momentjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular_momentjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular_momentjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular_momentjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular_momentjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular_momentjs.__dirname + '/lib.npmtest_angular_momentjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-momentjs/node_modules/angular-momentjs/angular-momentjs.js":"/*\n  angular-momentjs - v0.2.2 \n  2015-07-10\n*/\n(function(window, angular, undefined) {\n    angular.module(\"angular-moment\", [ \"gdi2290.moment\" ]);\n    angular.module(\"angular-momentjs\", [ \"gdi2290.moment\" ]);\n    angular.module(\"ngMoment\", [ \"gdi2290.moment\" ]);\n    angular.module(\"ngMomentjs\", [ \"gdi2290.moment\" ]);\n    angular.module(\"ngMomentJS\", [ \"gdi2290.moment\" ]);\n    angular.module(\"gdi2290.amTimeAgo\", []);\n    angular.module(\"gdi2290.amDateFormat\", []);\n    angular.module(\"gdi2290.moment-service\", []);\n    angular.module(\"gdi2290.moment\", [ \"gdi2290.moment-service\", \"gdi2290.amDateFormat\", \"gdi2290.amTimeAgo\" ]);\n    \"use strict\";\n    angular.module(\"gdi2290.amDateFormat\").filter(\"amDateFormat\", [ \"$moment\", function($moment) {\n        return function(value, format) {\n            if (typeof value === \"undefined\" || value === null) {\n                return \"\";\n            }\n            if (!isNaN(parseFloat(value)) && isFinite(value)) {\n                value = new Date(parseInt(value, 10));\n            }\n            if ($moment.then) {\n                $moment().then(function(moment) {\n                    return moment(value).format(format);\n                });\n            } else {\n                return $moment(value).format(format);\n            }\n        };\n    } ]);\n    \"use strict\";\n    angular.module(\"gdi2290.amTimeAgo\").directive(\"amTimeAgo\", [ \"$moment\", \"$timeout\", function($moment, $timeout) {\n        function isUndefined(value) {\n            return typeof value === \"undefined\" || value === null || value === \"\";\n        }\n        return function(scope, element, attrs) {\n            var activeTimeout = null;\n            var currentValue;\n            var currentFormat;\n            function cancelTimer() {\n                if (activeTimeout) {\n                    $timeout.cancel(activeTimeout);\n                    activeTimeout = null;\n                }\n            }\n            function updateTime(momentInstance) {\n                element.text(momentInstance.fromNow());\n                var howOld;\n                if ($moment.then) {\n                    $moment().then(function(moment) {\n                        howOld = moment().diff(momentInstance, \"minute\");\n                    });\n                } else {\n                    howOld = $moment().diff(momentInstance, \"minute\");\n                }\n                var secondsUntilUpdate = 3600;\n                if (howOld < 1) {\n                    secondsUntilUpdate = 1;\n                } else if (howOld < 60) {\n                    secondsUntilUpdate = 30;\n                } else if (howOld < 180) {\n                    secondsUntilUpdate = 300;\n                }\n                activeTimeout = $timeout(function() {\n                    updateTime(momentInstance);\n                }, secondsUntilUpdate * 1e3, false);\n            }\n            function updateMoment() {\n                cancelTimer();\n                if ($moment().then) {\n                    $moment.then(function(moment) {\n                        updateTime(moment(currentValue, currentFormat));\n                    });\n                } else {\n                    updateTime($moment(currentValue, currentFormat));\n                }\n            }\n            scope.$watch(attrs.amTimeAgo, function(value) {\n                if (isUndefined(value)) {\n                    cancelTimer();\n                    if (currentValue) {\n                        element.text(\"\");\n                        currentValue = null;\n                    }\n                    return;\n                }\n                if (angular.isNumber(value)) {\n                    value = new Date(value);\n                }\n                currentValue = value;\n                updateMoment();\n            });\n            attrs.$observe(\"amFormat\", function(format) {\n                currentFormat = format;\n                if (currentValue) {\n                    updateMoment();\n                }\n            });\n            scope.$on(\"$destroy\", function() {\n                cancelTimer();\n            });\n        };\n    } ]);\n    \"use strict\";\n    angular.module(\"gdi2290.moment-service\").provider(\"$moment\", function() {\n        var _asyncLoading = false;\n        var _scriptUrl = \"//cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.3/moment.js\";\n        var _localeConfig = {};\n        var _locale;\n        this.asyncLoading = function(config) {\n            _asyncLoading = config || _asyncLoading;\n            return this;\n        };\n        this.scriptUrl = function(url) {\n            _scriptUrl = url || _scriptUrl;\n            return this;\n        };\n        this.locale = function(locale, config) {\n            _locale = locale || _locale;\n            _localeConfig = config || _localeConfig;\n            return this;\n        };\n        function createScript(callback) {\n            if (!document) {\n                return;\n            }\n            var scriptTag = document.createElement(\"script\");\n            scriptTag.type = \"text/javascript\";\n            scriptTag.async = true;\n            scriptTag.src = _scriptUrl;\n            scriptTag.onreadystatechange = function() {\n                if (this.readyState === \"complete\") {\n                    callback();\n                }\n            };\n            scriptTag.onload = callback;\n            var s = document.getElementsByTagName(\"head\")[0];\n            s.appendChild(scriptTag);\n        }\n        this.$get = [ \"$timeout\", \"$q\", \"$window\", function($timeout, $q, $window) {\n            var deferred = $q.defer();\n            var _moment = $window.moment;\n            if (_asyncLoading) {\n                var onScriptLoad = function(callback) {\n                    $timeout(function() {\n                        if (_locale) {\n                            if ($window.moment.lang) {\n                                $window.moment.lang(_locale, _localeConfig);\n                            } else {\n                                $window.moment.locale(_locale, _localeConfig);\n                            }\n                        }\n                        deferred.resolve($window.moment);\n                    });\n                };\n                createScript(onScriptLoad);\n            } else {\n                if (_locale) {\n                    if ($window.moment.lang) {\n                        $window.moment.lang(_locale, _localeConfig);\n                    } else {\n                        $window.moment.locale(_locale, _localeConfig);\n                    }\n                }\n            }\n            return _asyncLoading ? deferred.promise : _moment;\n        } ];\n    });\n})(this, this.angular, void 0);","/home/travis/build/npmtest/node-npmtest-angular-momentjs/node_modules/angular-momentjs/Gruntfile.js":"'use strict';\n\nvar LIVERELOAD_PORT = 35729;\nvar lrSnippet = require('connect-livereload')({ port: LIVERELOAD_PORT });\nvar mountFolder = function(connect, dir) {\n  return connect.static(require('path').resolve(dir));\n};\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to recursively match all subfolders:\n// 'test/spec/**/*.js'\n\nmodule.exports = function(grunt) {\n  require('load-grunt-tasks')(grunt);\n  require('time-grunt')(grunt);\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    bwr: grunt.file.readJSON('bower.json'),\n    concat: {\n      dist:{}\n    },\n    ngAnnotate: {\n      dist: {}\n    },\n    uglify: {\n      options: {\n        report: 'min',\n        enclose: {\n          'this': 'window',\n          'this.angular': 'angular',\n          'void 0': 'undefined'\n        },\n        banner: '/*\\n  <%= pkg.name %> - v<%= pkg.version %> \\n  ' +\n          '<%= grunt.template.today(\"yyyy-mm-dd\") %>\\n*/\\n'+\n        ''\n      },\n      dist: {\n        options: {\n          beautify: false,\n          mangle: true,\n          compress: {\n            global_defs: {\n              'DEBUG': false\n            },\n            dead_code: true\n          },\n          sourceMap: '<%= bwr.name %>.min.js.map'\n        },\n        files: {\n          '<%= bwr.name %>.min.js': ['./lib/index.js', './lib/*/*.js']\n        }\n      },\n      src: {\n        options: {\n          beautify: true,\n          mangle: false,\n          compress: false\n        },\n        files: {\n          '<%= bwr.name %>.js': ['./lib/index.js', './lib/*/*.js']\n        }\n      }\n    },\n    watch: {\n      livereload: {\n        options: {\n          livereload: LIVERELOAD_PORT\n        },\n        files: [\n          'example/{,*/}*.html',\n          'example/{,*/}*.js',\n          '{,*/}*.js'\n        ]\n      }\n    },\n    connect: {\n      options: {\n        port: '3000',\n        // Change this to '0.0.0.0' to access the server from outside.\n        hostname: 'localhost'\n      },\n      livereload: {\n        options: {\n          middleware: function (connect) {\n            return [\n              lrSnippet,\n              mountFolder(connect, '.tmp'),\n              mountFolder(connect, 'example'),\n              mountFolder(connect, '.')\n            ];\n          }\n        }\n      }\n\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      gruntfile: {\n        src: 'Gruntfile.js'\n      },\n      lib: {\n        src: ['lib/**/*.js']\n      }\n    },\n     complexity: {\n      generic: {\n        src: ['lib/**/*.js'],\n        options: {\n          jsLintXML: 'report.xml', // create XML JSLint-like report\n          checkstyleXML: 'checkstyle.xml', // create checkstyle report\n          errorsOnly: false, // show only maintainability errors\n          cyclomatic: 3,\n          halstead: 8,\n          maintainability: 100\n        }\n      }\n    }\n  });\n\n  grunt.registerTask('server', function (target) {\n    grunt.task.run([\n      'connect:livereload',\n      'watch'\n    ]);\n  });\n\n  grunt.registerTask('test', [\n    // 'complexity',\n    'jshint'\n  ]);\n\n  grunt.registerTask('build', [\n    'concat',\n    'ngAnnotate',\n    'uglify'\n  ]);\n\n  grunt.registerTask('default', [\n    'build'\n  ]);\n};\n","/home/travis/build/npmtest/node-npmtest-angular-momentjs/node_modules/angular-momentjs/lib/directives/amDateFormat.js":"'use strict';\nangular.module('gdi2290.amDateFormat')\n.filter('amDateFormat', ['$moment', function($moment) {\n    return function(value, format) {\n      if (typeof value === 'undefined' || value === null) {\n        return '';\n      }\n\n      if (!isNaN(parseFloat(value)) && isFinite(value)) {\n        // Milliseconds since the epoch\n        value = new Date(parseInt(value, 10));\n      }\n\n      // else assume the given value is already a date\n      if ($moment.then) {\n        $moment().then(function(moment) {\n          return moment(value).format(format);\n        });\n      } else {\n        return $moment(value).format(format);\n      }\n\n    };\n}]);\n","/home/travis/build/npmtest/node-npmtest-angular-momentjs/node_modules/angular-momentjs/lib/filters/amTimeAgo.js":"'use strict';\nangular.module('gdi2290.amTimeAgo')\n.directive('amTimeAgo', ['$moment', '$timeout', function($moment, $timeout) {\n    function isUndefined(value) {\n      return (typeof value === 'undefined') || (value === null) || (value === '');\n    }\n\n    return function(scope, element, attrs) {\n      var activeTimeout = null;\n      var currentValue;\n      var currentFormat;\n\n      function cancelTimer() {\n        if (activeTimeout) {\n          $timeout.cancel(activeTimeout);\n          activeTimeout = null;\n        }\n      }\n\n      function updateTime(momentInstance) {\n        element.text(momentInstance.fromNow());\n        var howOld;\n\n        if ($moment.then) {\n          $moment().then(function(moment) {\n            howOld = moment().diff(momentInstance, 'minute');\n          });\n        } else {\n          howOld = $moment().diff(momentInstance, 'minute');\n        }\n\n        var secondsUntilUpdate = 3600;\n        if (howOld < 1) {\n          secondsUntilUpdate = 1;\n        } else if (howOld < 60) {\n          secondsUntilUpdate = 30;\n        } else if (howOld < 180) {\n          secondsUntilUpdate = 300;\n        }\n\n        activeTimeout = $timeout(function () {\n          updateTime(momentInstance);\n        }, secondsUntilUpdate * 1000, false);\n      }\n\n      function updateMoment() {\n        cancelTimer();\n        if ($moment().then) {\n          $moment.then(function(moment) {\n            updateTime(moment(currentValue, currentFormat));\n          });\n        } else {\n          updateTime($moment(currentValue, currentFormat));\n        }\n      }\n\n\n\n      scope.$watch(attrs.amTimeAgo, function (value) {\n        if (isUndefined(value)) {\n          cancelTimer();\n          if (currentValue) {\n            element.text('');\n            currentValue = null;\n          }\n          return;\n        }\n\n        if (angular.isNumber(value)) {\n          // Milliseconds since the epoch\n          value = new Date(value);\n        }\n        // else assume the given value is already a date\n\n        currentValue = value;\n        updateMoment();\n      });\n\n      attrs.$observe('amFormat', function (format) {\n        currentFormat = format;\n        if (currentValue) {\n          updateMoment();\n        }\n      });\n\n      scope.$on('$destroy', function () {\n        cancelTimer();\n      });\n\n    };\n}]);\n","/home/travis/build/npmtest/node-npmtest-angular-momentjs/node_modules/angular-momentjs/lib/services/moment.js":"'use strict';\n\nangular.module('gdi2290.moment-service')\n.provider('$moment', function() {\n  var _asyncLoading = false;\n  var _scriptUrl = '//cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.3/moment.js';\n  var _localeConfig = {};\n  var _locale;\n\n  this.asyncLoading = function(config) {\n    _asyncLoading = config || _asyncLoading;\n    return this;\n  };\n\n  this.scriptUrl = function(url) {\n    _scriptUrl = url || _scriptUrl;\n    return this;\n  };\n\n  this.locale = function(locale, config) {\n    _locale = locale || _locale;\n    _localeConfig = config || _localeConfig;\n    return this;\n  };\n\n  // Create a script tag with moment as the source\n  // and call our onScriptLoad callback when it\n  // has been loaded\n  function createScript(callback) {\n    if (!document) { return; }\n    var scriptTag = document.createElement('script');\n    scriptTag.type = 'text/javascript';\n    scriptTag.async = true;\n    scriptTag.src = _scriptUrl;\n    scriptTag.onreadystatechange = function() {\n      if (this.readyState === 'complete') {\n        callback();\n      }\n    };\n    scriptTag.onload = callback;\n    var s = document.getElementsByTagName('head')[0];\n    s.appendChild(scriptTag);\n  }\n\n  this.$get = ['$timeout', '$q', '$window', function($timeout, $q, $window) {\n      var deferred = $q.defer();\n      var _moment = $window.moment;\n\n      if (_asyncLoading) {\n        // Load client in the browser\n        var onScriptLoad = function(callback) {\n          $timeout(function() {\n            if (_locale) {\n              if ($window.moment.lang) {\n                $window.moment.lang(_locale, _localeConfig);\n              } else {\n                $window.moment.locale(_locale, _localeConfig);\n              }\n            }\n            deferred.resolve($window.moment);\n          });\n        };\n        createScript(onScriptLoad);\n      } else {\n        if (_locale) {\n          if ($window.moment.lang) {\n            $window.moment.lang(_locale, _localeConfig);\n          } else {\n            $window.moment.locale(_locale, _localeConfig);\n          }\n        }\n      }\n\n      return (_asyncLoading) ? deferred.promise: _moment;\n  }];\n});\n"}